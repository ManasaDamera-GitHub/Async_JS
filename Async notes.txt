Asynchronous JavaScript is a programming approach that enables the non-blocking execution of tasks, allowing concurrent operations, improved responsiveness, and efficient handling of time-consuming
operations in web applications, JavaScript is a single-threaded and synchronous language. The code is executed in order one at a time, But Javascript may appear to be asynchronous in some situations.

Blocking Code:
      Synchronous operations that halt(blocks) further execution until the current task is finished.Example: A long-running for loop or a synchronous file read in Node.js.

Non-Blocking Code:
      Asynchronous operations that allow other code to run while waiting for the task to complete.Example: Using setTimeout, Promises, async/await, or callbacks for I/O operations.

There are several methods that can be used to perform asynchronous javascript tasks, which are listed below:
1.using Callbacks 2.using Promises

USING CALLBACKS:
      Callbacks are functions passed as arguments to other functions and are executed once the asynchronous task is complete.
SYNTAX:
      function myFunction(param1, param2, callback) {
    // Do some work...
    // Call the callback function
    callback(result);
}

Example:
      function myFunction(callback) { 
	setTimeout(() => { 
		const data = { name: "Aman", age: 21 }; 
		callback(data); 
	}, 3000); 
} 

myFunction((data) => { 
	console.log("Data:", data); 
});

OUTPUT: Data: { name: 'menny', age: 20 }

What is a Promise?
A Promise is an object that represents the eventual completion (or failure) of an asynchronous operation and its resulting value. It has three states:

Pending: The initial stateâ€”neither fulfilled nor rejected.
Fulfilled: The operation completed successfully, and the promise has a resolved value.
Rejected: The operation failed, and the promise has a reason for the failure (usually an error).
